package com.leetcode.dp.linear;

import com.Utils;

/**
 * <a href="https://leetcode.com/problems/best-time-to-buy-and-sell-stock-with-transaction-fee/">
 * Best Time to Buy and Sell Stock with Transaction Fee</a>
 *
 * @author zms
 * @date 3:42 PM 2020/3/24
 */
public class BestTimeToBuyAndSellStockWithTransactionFee {
    /**
     * Your are given an array of integers prices,
     * for which the i-th element is the price of a given stock on day i;
     * and a non-negative integer fee representing a transaction fee.
     * You may complete as many transactions as you like,
     * but you need to pay the transaction fee for each transaction.
     * You may not buy more than 1 share of a stock at a time (ie. you must sell the stock share before01 you buy again.)
     * Return the maximum profit you can make.
     * <p>
     * Example 1:
     * Input: prices = [1, 3, 2, 8, 4, 9], fee = 2
     * Output: 8
     * Explanation: The maximum profit can be achieved by:
     * Buying at prices[0] = 1
     * Selling at prices[3] = 8
     * Buying at prices[4] = 4
     * Selling at prices[5] = 9
     * The total profit is ((8 - 1) - 2) + ((9 - 4) - 2) = 8.
     * <p>
     * Note:
     * 0 < prices.length <= 50000.
     * 0 < prices[i] < 50000.
     * 0 <= fee < 50000.
     */

    public int maxProfit1(int[] prices, int fee) {
        if (prices == null || prices.length < 2) {
            return 0;
        }
        // dp[i] 表示第i天的最大利润
        int[] dp = new int[prices.length];
        int max = 0;
        for (int i = 0; i < prices.length - 1; i++) {
            for (int j = i + 1; j < prices.length; j++) {
                int price = Math.max(prices[j] - prices[i] - fee, 0);
                if (i > 0) {
                    price += dp[i - 1];
                }
                dp[j] = Math.max(dp[j], price);
                max = Math.max(dp[j], max);
            }
            dp[i + 1] = Math.max(dp[i], dp[i + 1]);
            Utils.printArrays(dp);
        }

        return max;
    }

    public int maxProfit(int[] prices, int fee) {
        if (prices == null || prices.length < 2) {
            return 0;
        }

        int cash = 0, hold = -prices[0];
        for (int i = 1; i < prices.length; i++) {
            // 第几天结束时拥有的现金
            cash = Math.max(cash, hold + prices[i] - fee);

            hold = Math.max(hold, cash - prices[i]);
            System.out.println(cash + " : " + hold + " : " + prices[i]);
        }
        System.out.println("下一个");
        return cash;
    }

    public int maxProfit01(int[] prices, int fee) {
        int n = prices.length;
        Integer[][] dp = new Integer[n][2];
        return process01(prices, fee, 0, 1, dp);
    }

    // price 表示前一个状态 0 买 1 卖
    public static int process01(int[] prices, int fee, int index, int price, Integer[][] dp) {
        if (index >= prices.length) {
            return 0;
        }
        if (dp[index][price] != null) {
            return dp[index][price];
        }
        // index 不买不卖
        int ans = process01(prices, fee, index + 1, price, dp);

        if (price == 0) {
            // index 只能卖
            ans = Math.max(ans, process01(prices, fee, index + 1, 1, dp) + prices[index] - fee);
        } else {
            // index 只能买
            ans = Math.max(ans, process01(prices, fee, index + 1, 0, dp) - prices[index]);
        }
        dp[index][price] = ans;
        return ans;
    }

    public int maxProfit02(int[] prices, int fee) {
        int n = prices.length;
        int[][] dp = new int[n + 1][2];
        for (int index = n - 1; index >= 0; index--) {
            for (int i = 0; i < 2; i++) {
                int ans = dp[index + 1][i];
                if (i == 0) {
                    ans = Math.max(ans, dp[index + 1][1] + prices[index] - fee);
                } else {
                    ans = Math.max(ans, dp[index + 1][0] - prices[index]);
                }
                dp[index][i] = ans;
            }
        }
        return dp[0][1];
    }

    public int maxProfit03(int[] prices, int fee) {
        int n = prices.length;
        int buy = 0;
        int sell = 0;
        for (int index = n - 1; index >= 0; index--) {
            int temp = buy;
            buy = Math.max(buy, sell + prices[index] - fee);
            sell = Math.max(sell, temp - prices[index]);
        }
        return sell;
    }

    public static void main(String[] args) {
        System.out.println(new BestTimeToBuyAndSellStockWithTransactionFee().maxProfit03(new int[]{1, 6, 0, 1}, 0));
        System.out.println(new BestTimeToBuyAndSellStockWithTransactionFee().maxProfit03(new int[]{1, 5, 2, 8, 4, 9}, 2));
        System.out.println(new BestTimeToBuyAndSellStockWithTransactionFee().maxProfit03(new int[]{1, 3, 7, 5, 10, 3}, 3) == 6);

        System.out.println(new BestTimeToBuyAndSellStockWithTransactionFee().maxProfit03(new int[]{1, 3, 7, 5, 10, 3}, 3));
//        System.out.println(new BestTimeToBuyAndSellStockWithTransactionFee().maxProfit(new int[]{1036,2413,2776,825,2640,31,1560,2917,4282,783,3146,2600,1939,694,4284,3881,554,167,372,4620,3037,1175,1075,3845,4981,4495,3406,4228,2807,4774,4526,3914,2633,3762,1570,2334,616,1648,1914,2900,349,2428,4013,1964,4020,1882,629,240,2595,2902,3419,292,224,4437,4918,632,3701,3840,3996,2129,3345,3979,1954,781,1576,1084,3250,4517,3106,2133,309,4520,2225,4366,4628,1303,4373,1266,3181,558,3855,3447,4335,2115,4603,661,1715,3972,2846,342,686,787,273,2575,100,2860,3587,4236,3862,2238,3471,3123,431,4489,1551,596,4037,4986,594,2386,326,628,1363,2377,4986,3780,3853,2670,2852,3519,2998,4083,3392,2394,1083,3958,4082,1506,2322,2715,4901,2555,4097,3748,4717,3901,3329,4616,3334,2603,3705,631,3541,555,508,464,4495,4463,3616,31,2177,3307,1011,2759,751,1537,1000,292,3921,1442,2726,4677,792,82,2580,609,4758,3190,1958,913,955,1259,1634,4729,2672,1761,1467,2347,4295,2049,4708,1452,3411,1428,4078,2627,3785,2432,2916,492,1108,1691,972,3823,4086,2115,1925,1454,291,3266,300,2539,2681,2084,4633,1084,1061,1043,1304,2205,410,4332,2567,703,529,4273,3684,308,3164,4876,3108,4993,4555,1237,4753,549,2795,3426,819,2897,825,2514,3419,1854,3209,3766,2794,4117,4668,2162,1571,2446,1480,974,1090,3903,4655,4452,1451,2953,1241,842,1750,3847,3053,4395,4338,1493,1660,1569,3418,3029,4416,2056,2283,3392,2032,4354,803,4959}, 2));

        System.out.println(595352 == new BestTimeToBuyAndSellStockWithTransactionFee().maxProfit03(new int[]{}, 655));
    }
}
